ASP.NET Core Agenda - 
	PoC - Proof-Of-Concept [Authentication/Authorization [Role Based]/Session/Caching/EF Core (Code First Migration), Security Trimming]

	.NET Core [Cross Platform/Community/Open Source]

		Visual Studio 2022
		Microsoft SQL Server
		SQL Server Management Studio

How does Web Application Request Lifecycle work? [Middleware]

Begin Request

Authentication [Checking the Identity]

Authorization [Grant/Revoke Permissions for the resource]

Resolve Cache

Acquire Session State

Processes Request

Release The Session

Caching Resource

Log Request

End Request


.NET 6 Application Development - 

	1) ASP.NET 6 Web Application [MVC/Razor Page]
	2) ASP.NET 6 Web API Development
	3) RPC - Remote Procedure Calls
	4) Blazor Apps [Client/Server] [Along with Client Side Frameworks and Libraries]
	5) Console Apps
	6) WCF

C# + HTML5 + CSS3 + JavaScript +...

Why MVC?
	
1) Separation of Concern
2) Conditional Rendering and Partial Page Updates
3) Precise control over HTML elements
4) Easy Testing
5) TDD - Test Driven Development
6) Strongly Types Models
7) Speed and Performance 
8) IoC and D.I. integration
9) SEO friendly
10) Area in ASP.NET MVC .NET 6
	Modularization [Featurewise Folder Structure]
11) Simple MVVM
12) Configuration to HTTP Strict Transport Security

Why CQRS [Pros and Cons]? What is CQRS? When should I use it?

Why DTOs? What are DTOs? When should I use it?

CQRS Pattern - Command Query Responsibility Segregation
DTOs - Data Transfer Object


What are the route types? [Server Side Routes]
	1) Default Route [https://www.something.com] [Default Controller/Default Action Method]
	2) Named/Specific Route [https://www.something.com/employees] [Specific Controller/Specific Action Method]
	3) Parameterized Route [https://www.something.com/employees/12838][Specific Controller/Specific Action Method and Parameter/Query String - Name/Value Pair]

	SEO - Search Engine Optimization [SSR - Server Side Rendering]
			CSR - Client Side Rendering [Not optimized for SEOs]

	ASP.NET MVC .NET 6
		https://something.com/{controller=Home}/{action-method=Index}/{parameter?}

How does controller work?
	1) Controller can work along [Without View and Without Model] = String Contents
	2) Controller can work only with View [Without Model] = Static Webpage
	3) Controller can work only with Model [Without View] = Data [JSON Format]
	4) Controller can work with model and view [Dynamic Webpage - Html along with data]


ASP.NET MVC apps can run on - 
	Kestrel [Default]
	NGINX
	IIS
	Docker
	Http.SYS

How do you make your application as mobile first?
	1) Media Query [CSS3] [Responsive Design]
	2) CSS Bootstrap Framework [5.x]
	3) Adaptive Designs

How do you implement common look and feel in websites?
	Layout Page

Extension of views - .cshtml
	C# code will always start with "@" sign

HTTP Methods/Actions/Verbs - GET/POST/PUT/DELETE


Assignments - 

1) Why? What is Clean Architecture? In what scenarios I should use it? - Assignment

2) Why CQRS [Pros and Cons]? What is CQRS? When should I use it?

3) Why DTOs? What are DTOs? When should I use it?


How do you take a decision if you should work with synchronous or asynchronous controller?
	1) Non-Blocking Operations [Synchronous]
		CUP Bound operations - Which gets executed in L1, L2, L3 Cache or RAM
	2) Blocking Operations [Asynchronous]
		IO Operations - Disk Operations/Network Operations [Service Calls and Database Connectivity]

Controller - 
	Communication with View - [How to pass the data from Controller-To-View]
		1) Strongly Typed Models - ViewModel
		2) Weakly Typed Data - This data will always be available within the same request
			ViewBag [Dynamic]
			ViewData [Dictionary<Key,Value>] - 
				Is there any other way using which we can declare ViewData?
		TempData - Dictionary<Key,Value> - TempData is always available to next request

Purchase Order System - 
	Customer, Employee, Supplier, Shipper, Order, OrderDetail, Product, Category, Invoice

Perform The CRUD operations on all entities
		[FetchAll, FetchDetail, Insert, Update, Delete]

	DAL - Data Access Layer

		interface ICommonRepository<T>{
			List<T> GetAll();
			T GetDetails(int id);
			void Insert(T item);
			void Update(T item);
			void Delete(T item);
		}
		

		class CommonRepository : ICommonRepository{
			database object
			List<T> GetAll(){

			}
			T GetDetails(int id){

			}
			void Insert(T item){

			}

			void Update(T item){

			}

			void Delete(T item){

			}
		}
		ICommonRepository<Customer> customerRepo=new CommonRepository<Customer>();
		customerRepo.GetAll();

State Management - 

	Client Side [Non-Secured]			Server Side [Secured]
		Cookies [Transient/Persistant]			Session
		QueryString [Name=Value Pair]
		HiddenField

Session - Per Connection
	SessionId [Cookie]

Dependency Injection - 
	Development
		Database Local
	Q.A/Testing
		Mock Objects
	Production
		Cloud Database


eCommerce - PoC - Proof-Of-Concept [Authentication/Authorization [Role Based]/Session/Caching/EF Core (Code First Migration), Security Trimming]

1) List of Entities
2) Relationships between entities [Association] along with validations
3) User Stories for eCommerce App
	
Models - Data and Logic

--------------------------------------

What is CQRS Pattern?

It is Command and Query Responsibility Segregation Pattern which is responsible for separating out system’s read and write operations into separate models. Imagine, the reading of the data is from the different database and writing of the data is in different database. Along with that, if we want performance, scalability and simplification in terms of writing the queries and commands, we think of CQRS pattern.


Commands perform CUD operations – Create/Insert, Update and Delete operations to modify the data in the database. Queries perform read operations to fetch the data from the database. Few advantages of using CQRS pattern are –

Improved Performance – Using CQRS pattern, we can optimize each model based on the requirements of the system. For example, low latency and maximum throughput for write operations and caching for read operations.
Scalability – CQRS pattern can improve the scalability.
Easy to read and write the data as we are separating the queries and commands.
Flexibility in terms of reading the data from different data stores for each model with different formats like RDBMS or NoSQL databases.
Disadvantages of CQRS Pattern –

This pattern leads towards complexity as we are now separating queries and commands along with different models for each one of them
Eventual Consistency is one of the issues which we need to handle carefully as we have separated the queries and commands. There can be delay in changes to read models when we perform write operations
Debugging becomes complex
You have to put additional efforts during the development as it requires separate models for read and write operations which eventually will lead towards high maintenance cost
What is Mediator pattern?


Mediator pattern is a behavioral design pattern. This pattern is mainly used in loose coupling between objects by introducing a mediator object that encapsulates the interaction between them. Because of this pattern, our code becomes less dependent, more maintainable and extensible.

Instead of establishing communication between objects directly, objects send messages to the mediator, which then relays them to the appropriate objects. This allows the objects to be decoupled from each other and intern we can change their behavior independently of the others.

Few advantages of Mediator pattern are – reusability, centralized control over communication along with simplicity.


Important note – Mediator pattern can reduce the performance of an application as we are introducing one more abstraction layer which is the mediator object. So, be careful about it.

PoC Entities - 

	1) Catgeory
	2) Product
	3) Customer
	4) Employee
	5) Cart/Order
	6) CartDetail/OrderDetail
	7) Invoice

DTOs - Data Transfer Objects

	1) CatgeoryDto
	2) ProductDto
	3) CustomerDto
	4) EmployeeDto
	5) CartDto/OrderDto
	6) CartDetailDto/OrderDetailDto
	7) InvoiceDto

AutoMapper - Map Entities with Dtos for Performing Read and Write Operations

PoC CRUD operations - Contracts - Interfaces
	Performing CRUD - Create/Read/Update/Delete - Generic Repository Pattern [Synchronous Repository/Asynchronous Repository Pattern]


For Clean Architecture - 
	1) ASP.NET Core MVC
	2) Entity Framework Core [Code First Modeling Approach]
	3) CQRS Pattern
	4) AutoMapper
	5) Mediator Pattern
	6) Microsoft SQL Server

1) Create Project Structure for Clean Architecture Implementation
2) Start with Domain Entities with asscosiations
3) Include the reference of Domain Entities DLL into Application [Use Cases] Project
4) Add the reference of Application [Use Cases] DLL into Infrastrcuture DLL
5) Install EF Core packages and create new DbContext with required DbSets
6) Add the Migration and update your database
7) Declare contract in Application [For Use Cases - CRUD Operations - Generic Async Repository Contract]
8) You implment this contract into Generic Repository class in which you will write the logic to perform the CURD options using some DbContext
9) Implement/Declare DTOs - Data Transfer Objects
10) Install AutoMapper extension for ASP.NET Core and map DTOs with Entities using Profile of AutoMapper library
11) CQRS along with Mediator
	Commands and Queries - 
		Queries - Query Request and Query Handler [Repository via dependency injection/using mapper object of AutoMapper library, it will map the result of all the queries to the DTOs]
12) Configure connection string in ASP.NET Application [MVC/WebApi/Microservice/...]
13) Extend the IServiceCollection container by adding an extension method and call the method in ASP.NET application
14) Configure and Add Areas [Featurewise folder structure] in ASP.NET MVC app. Also configure the link in Navbar
15) Service registrations for AutoMapper and Mediator and call this in ASP.NET application

DQL Operations - Source - Will original Entity

DML Operation - Source - Will DTOs



Featurewise Folder Strcuture in ASP.NET Core MVC Application

Assignment -                 
	1) Display All Categories using CQRS and Mediator Pattern by adding a new Area with the name CategoryManager in your ASP.NET MVC application
	2) Insert New Categoryusing CQRS and Mediator Pattern in your ASP.NET MVC application


Step- 1
	Add CategoryDtos folder under DTOs folder of Application/Usecase logic DLL
	Add Two DTOs - CategoryDto [SelectAll, SelectSingle], NewCategoryDto [Insert]
	Maping between DTOs of Category with Entity Category in Profile folder and MappingProfiles Class in Application/Usecases DLL
	Register the CRUD opeations dependency in our Services container of Infrastructure for Category


--------------------------
Data caching in ASP.NET Core MVC Applications

	1) In-Memory Cache
		Each cache is identified by a unique key
		Define Caching Options
			Sliding Expiry = 2 Mins
			Absolute Expiry = 60 Mins
			
	2) Distributed Cache [Radis]


Configure ASP.NET Core MVC/Razor/... for Multi-Lingual Support - 
	You will have to add globalization support in Services container of your application
	You can use Translation in Views, Controllers and Models [Data Annotations]
	
	1) Index.en.resx, Index.es.resx, Index.de.resx, Index.tn.resx [Resource Files]
	2) HomeController.en.resx, HomeController.es.resx, HomeController.de.resx,...


	Resources
		Views
			Home
				Index.en.resx
				Index.es.resx	
				Index.hi.resx
			Shared
				_Layout.en.resx
				_Layout.es.resx	
				_Layout.hi.resx
			Controllers
				HomeController.es.resx
				HomeController.en.resx
				HomeController.hi.resx
		Areas
			ProductsManager
				Views
					Home
						Index.en.resx
						Index.es.resx	
						Index.hi.resx

Authentication and Authorization - 

	Authentication - Checking the Identity of the User
			For Example - Credentials [UserName and Password] [Identity Framework]
				      Digital Authentication
				      Biometrics
				      2FA/MFA
				      OAuth [Outlook/Hotmail]
	Authorization - Granting or Revoking the permissions from the Logged in User [Security Trimming] for secured resources of your application
			Role/User

Social Networking Authentication - 
	1) Register your application with social network auth provider
	2) OAuth provider will give some Id and Secret
	3) Register the Id and Secret in your application
	4) Use Google OAuth Library for .NET Core using which you can implement Authentication and Authorization process in your application






















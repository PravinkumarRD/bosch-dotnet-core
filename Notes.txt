ASP.NET Core Agenda - 
	PoC - Proof-Of-Concept [Authentication/Authorization [Role Based]/Session/Caching/EF Core (Code First Migration), Security Trimming]

	.NET Core [Cross Platform/Community/Open Source]

		Visual Studio 2022
		Microsoft SQL Server
		SQL Server Management Studio

How does Web Application Request Lifecycle work? [Middleware]

Begin Request

Authentication [Checking the Identity]

Authorization [Grant/Revoke Permissions for the resource]

Resolve Cache

Acquire Session State

Processes Request

Release The Session

Caching Resource

Log Request

End Request


.NET 6 Application Development - 

	1) ASP.NET 6 Web Application [MVC/Razor Page]
	2) ASP.NET 6 Web API Development
	3) RPC - Remote Procedure Calls
	4) Blazor Apps [Client/Server] [Along with Client Side Frameworks and Libraries]
	5) Console Apps
	6) WCF

C# + HTML5 + CSS3 + JavaScript +...

Why MVC?
	
1) Separation of Concern
2) Conditional Rendering and Partial Page Updates
3) Precise control over HTML elements
4) Easy Testing
5) TDD - Test Driven Development
6) Strongly Types Models
7) Speed and Performance 
8) IoC and D.I. integration
9) SEO friendly
10) Area in ASP.NET MVC .NET 6
	Modularization [Featurewise Folder Structure]
11) Simple MVVM
12) Configuration to HTTP Strict Transport Security

Why CQRS [Pros and Cons]? What is CQRS? When should I use it?

Why DTOs? What are DTOs? When should I use it?

CQRS Pattern - Command Query Responsibility Segregation
DTOs - Data Transfer Object


What are the route types? [Server Side Routes]
	1) Default Route [https://www.something.com] [Default Controller/Default Action Method]
	2) Named/Specific Route [https://www.something.com/employees] [Specific Controller/Specific Action Method]
	3) Parameterized Route [https://www.something.com/employees/12838][Specific Controller/Specific Action Method and Parameter/Query String - Name/Value Pair]

	SEO - Search Engine Optimization [SSR - Server Side Rendering]
			CSR - Client Side Rendering [Not optimized for SEOs]

	ASP.NET MVC .NET 6
		https://something.com/{controller=Home}/{action-method=Index}/{parameter?}

How does controller work?
	1) Controller can work along [Without View and Without Model] = String Contents
	2) Controller can work only with View [Without Model] = Static Webpage
	3) Controller can work only with Model [Without View] = Data [JSON Format]
	4) Controller can work with model and view [Dynamic Webpage - Html along with data]


ASP.NET MVC apps can run on - 
	Kestrel [Default]
	NGINX
	IIS
	Docker
	Http.SYS

How do you make your application as mobile first?
	1) Media Query [CSS3] [Responsive Design]
	2) CSS Bootstrap Framework [5.x]
	3) Adaptive Designs

How do you implement common look and feel in websites?
	Layout Page

Extension of views - .cshtml
	C# code will always start with "@" sign

HTTP Methods/Actions/Verbs - GET/POST/PUT/DELETE


Assignments - 

1) Why? What is Clean Architecture? In what scenarios I should use it? - Assignment

2) Why CQRS [Pros and Cons]? What is CQRS? When should I use it?

3) Why DTOs? What are DTOs? When should I use it?


How do you take a decision if you should work with synchronous or asynchronous controller?
	1) Non-Blocking Operations [Synchronous]
		CUP Bound operations - Which gets executed in L1, L2, L3 Cache or RAM
	2) Blocking Operations [Asynchronous]
		IO Operations - Disk Operations/Network Operations [Service Calls and Database Connectivity]

Controller - 
	Communication with View - [How to pass the data from Controller-To-View]
		1) Strongly Typed Models - ViewModel
		2) Weakly Typed Data - This data will always be available within the same request
			ViewBag [Dynamic]
			ViewData [Dictionary<Key,Value>] - 
				Is there any other way using which we can declare ViewData?
		TempData - Dictionary<Key,Value> - TempData is always available to next request

Purchase Order System - 
	Customer, Employee, Supplier, Shipper, Order, OrderDetail, Product, Category, Invoice

Perform The CRUD operations on all entities
		[FetchAll, FetchDetail, Insert, Update, Delete]

	DAL - Data Access Layer

		interface ICommonRepository<T>{
			List<T> GetAll();
			T GetDetails(int id);
			void Insert(T item);
			void Update(T item);
			void Delete(T item);
		}
		

		class CommonRepository : ICommonRepository{
			database object
			List<T> GetAll(){

			}
			T GetDetails(int id){

			}
			void Insert(T item){

			}

			void Update(T item){

			}

			void Delete(T item){

			}
		}
		ICommonRepository<Customer> customerRepo=new CommonRepository<Customer>();
		customerRepo.GetAll();

State Management - 

	Client Side [Non-Secured]			Server Side [Secured]
		Cookies [Transient/Persistant]			Session
		QueryString [Name=Value Pair]
		HiddenField

Session - Per Connection
	SessionId [Cookie]

Dependency Injection - 
	Development
		Database Local
	Q.A/Testing
		Mock Objects
	Production
		Cloud Database


eCommerce - PoC - Proof-Of-Concept [Authentication/Authorization [Role Based]/Session/Caching/EF Core (Code First Migration), Security Trimming]

1) List of Entities
2) Relationships between entities [Association] along with validations
3) User Stories for eCommerce App
	
Models - Data and Logic

































